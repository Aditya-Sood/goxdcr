// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	common "github.com/couchbase/goxdcr/common"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"

	sync "sync"
)

// P2PManager is an autogenerated mock type for the P2PManager type
type P2PManager struct {
	mock.Mock
}

// CheckVBMaster provides a mock function with given fields: _a0, _a1
func (_m *P2PManager) CheckVBMaster(_a0 peerToPeer.BucketVBMapType, _a1 common.Pipeline) (map[string]*peerToPeer.VBMasterCheckResp, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]*peerToPeer.VBMasterCheckResp
	if rf, ok := ret.Get(0).(func(peerToPeer.BucketVBMapType, common.Pipeline) map[string]*peerToPeer.VBMasterCheckResp); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*peerToPeer.VBMasterCheckResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(peerToPeer.BucketVBMapType, common.Pipeline) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLifecycleId provides a mock function with given fields:
func (_m *P2PManager) GetLifecycleId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReplicationSpecChangeCallback provides a mock function with given fields: id, oldVal, newVal, wg
func (_m *P2PManager) ReplicationSpecChangeCallback(id string, oldVal interface{}, newVal interface{}, wg *sync.WaitGroup) error {
	ret := _m.Called(id, oldVal, newVal, wg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}, *sync.WaitGroup) error); ok {
		r0 = rf(id, oldVal, newVal, wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPushReqMergerOnce provides a mock function with given fields: pm
func (_m *P2PManager) SetPushReqMergerOnce(pm func(string, string, interface{}) error) {
	_m.Called(pm)
}

// Start provides a mock function with given fields:
func (_m *P2PManager) Start() (peerToPeer.PeerToPeerCommAPI, error) {
	ret := _m.Called()

	var r0 peerToPeer.PeerToPeerCommAPI
	if rf, ok := ret.Get(0).(func() peerToPeer.PeerToPeerCommAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(peerToPeer.PeerToPeerCommAPI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *P2PManager) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
