package mocks

import metadata "github.com/couchbase/goxdcr/metadata"
import mock "github.com/stretchr/testify/mock"

// CheckpointsService is an autogenerated mock type for the CheckpointsService type
type CheckpointsService struct {
	mock.Mock
}

// CheckpointsDoc provides a mock function with given fields: replicationId, vbno
func (_m *CheckpointsService) CheckpointsDoc(replicationId string, vbno uint16) (*metadata.CheckpointsDoc, error) {
	ret := _m.Called(replicationId, vbno)

	var r0 *metadata.CheckpointsDoc
	if rf, ok := ret.Get(0).(func(string, uint16) *metadata.CheckpointsDoc); ok {
		r0 = rf(replicationId, vbno)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.CheckpointsDoc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint16) error); ok {
		r1 = rf(replicationId, vbno)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckpointsDocs provides a mock function with given fields: replicationId
func (_m *CheckpointsService) CheckpointsDocs(replicationId string) (map[uint16]*metadata.CheckpointsDoc, error) {
	ret := _m.Called(replicationId)

	var r0 map[uint16]*metadata.CheckpointsDoc
	if rf, ok := ret.Get(0).(func(string) map[uint16]*metadata.CheckpointsDoc); ok {
		r0 = rf(replicationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint16]*metadata.CheckpointsDoc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelCheckpointsDoc provides a mock function with given fields: replicationId, vbno
func (_m *CheckpointsService) DelCheckpointsDoc(replicationId string, vbno uint16) error {
	ret := _m.Called(replicationId, vbno)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint16) error); ok {
		r0 = rf(replicationId, vbno)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelCheckpointsDocs provides a mock function with given fields: replicationId
func (_m *CheckpointsService) DelCheckpointsDocs(replicationId string) error {
	ret := _m.Called(replicationId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(replicationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertCheckpoints provides a mock function with given fields: replicationId, vbno, ckpt_record
func (_m *CheckpointsService) UpsertCheckpoints(replicationId string, vbno uint16, ckpt_record *metadata.CheckpointRecord) error {
	ret := _m.Called(replicationId, vbno, ckpt_record)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint16, *metadata.CheckpointRecord) error); ok {
		r0 = rf(replicationId, vbno, ckpt_record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
