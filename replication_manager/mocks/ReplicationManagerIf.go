package mocks

import common "github.com/couchbase/goxdcr/common"
import metadata "github.com/couchbase/goxdcr/metadata"
import mock "github.com/stretchr/testify/mock"

import service_def "github.com/couchbase/goxdcr/service_def"

// ReplicationManagerIf is an autogenerated mock type for the ReplicationManagerIf type
type ReplicationManagerIf struct {
	mock.Mock
}

// checkReplicationStatus provides a mock function with given fields: fin_chan
func (_m *ReplicationManagerIf) checkReplicationStatus(fin_chan chan bool) {
	_m.Called(fin_chan)
}

// createAndPersistReplicationSpec provides a mock function with given fields: justValidate, sourceBucket, targetCluster, targetBucket, settings
func (_m *ReplicationManagerIf) createAndPersistReplicationSpec(justValidate bool, sourceBucket string, targetCluster string, targetBucket string, settings map[string]interface{}) (*metadata.ReplicationSpecification, map[string]error, error) {
	ret := _m.Called(justValidate, sourceBucket, targetCluster, targetBucket, settings)

	var r0 *metadata.ReplicationSpecification
	if rf, ok := ret.Get(0).(func(bool, string, string, string, map[string]interface{}) *metadata.ReplicationSpecification); ok {
		r0 = rf(justValidate, sourceBucket, targetCluster, targetBucket, settings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.ReplicationSpecification)
		}
	}

	var r1 map[string]error
	if rf, ok := ret.Get(1).(func(bool, string, string, string, map[string]interface{}) map[string]error); ok {
		r1 = rf(justValidate, sourceBucket, targetCluster, targetBucket, settings)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(bool, string, string, string, map[string]interface{}) error); ok {
		r2 = rf(justValidate, sourceBucket, targetCluster, targetBucket, settings)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// init provides a mock function with given fields: repl_spec_svc, remote_cluster_svc, cluster_info_svc, xdcr_topology_svc, replication_settings_svc, checkpoint_svc, capi_svc, audit_svc, uilog_svc, global_setting_svc, bucket_settings_svc, internal_settings_svc
func (_m *ReplicationManagerIf) init(repl_spec_svc service_def.ReplicationSpecSvc, remote_cluster_svc service_def.RemoteClusterSvc, cluster_info_svc service_def.ClusterInfoSvc, xdcr_topology_svc service_def.XDCRCompTopologySvc, replication_settings_svc service_def.ReplicationSettingsSvc, checkpoint_svc service_def.CheckpointsService, capi_svc service_def.CAPIService, audit_svc service_def.AuditSvc, uilog_svc service_def.UILogSvc, global_setting_svc service_def.GlobalSettingsSvc, bucket_settings_svc service_def.BucketSettingsSvc, internal_settings_svc service_def.InternalSettingsSvc) {
	_m.Called(repl_spec_svc, remote_cluster_svc, cluster_info_svc, xdcr_topology_svc, replication_settings_svc, checkpoint_svc, capi_svc, audit_svc, uilog_svc, global_setting_svc, bucket_settings_svc, internal_settings_svc)
}

// initMetadataChangeMonitor provides a mock function with given fields:
func (_m *ReplicationManagerIf) initMetadataChangeMonitor() {
	_m.Called()
}

// initPausedReplications provides a mock function with given fields:
func (_m *ReplicationManagerIf) initPausedReplications() {
	_m.Called()
}

// upgradeRemoteClusterRefs provides a mock function with given fields:
func (_m *ReplicationManagerIf) upgradeRemoteClusterRefs() {
	_m.Called()
}

// OnError provides a mock function with given fields: s, errMap
func (_m *ReplicationManagerIf) OnError(s common.Supervisor, errMap map[string]error) {
	_m.Called(s, errMap)
}
