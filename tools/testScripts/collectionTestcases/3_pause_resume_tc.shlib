# Copyright (c) 2019-2020 Couchbase, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]}  ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S1")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runDataLoad {
	# Run CBWorkloadgen in parallel
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1"
	waitForBgJobs
}

function pauseAndResumeMultiples {
	local total=$1
	local i

	for (( i=0; $i<$total; i=$(($i+1)) ))
	do
		echo "Sleeping 10 seconds before running another pass"
		sleep 10
		echo "Running multiple pause and resumes $(( $i+1 )) out of $total"
		oldDataReplicated=`getDataReplicated "C1" "B1" "C2" "B2"`
		oldDocsProcessed=`getDocsProcessed "C1" "B1" "C2" "B2"`

		echo "Pausing replication - current data replicated: $oldDataReplicated docs_processed: $oldDocsProcessed"
		pauseReplication "C1" "B1" "C2" "B2"
		echo "Waiting 10 seconds for pipeline to really pause"
		sleep 10
		grepForPanics
		validateXDCRCheckpoints "C1"
		validateXDCRCheckpoints "C2"

		resumeReplication "C1" "B1" "C2" "B2"
		echo "Waiting 10 seconds for resume to finish"
		sleep 10
		grepForPanics

		checkDocsProcessed "C1" "B1" "C2" "B2" "$oldDocsProcessed"
		checkDataReplicatedIsZero "C1" "B1" "C2" "B2" "$oldDataReplicated"

		# Kill source goxdcr
		killGoXdcr "C1"
		echo "Sleeping 15 seconds for goxdcr to reboot"
		sleep 15
		checkUnidirectionalChangesLeft
		grepForPanics

		# Run data load again
		oldDataReplicated=`getDataReplicated "C1" "B1" "C2" "B2"`
		runDataLoad "$i"
		# Changes left should go to 0
		checkUnidirectionalChangesLeft
		sleep 10
		if (( `getDocsProcessed "C1" "B1" "C2" "B2"` == $oldDocsProcessed ));then
			echo "Data processed should not be the same after run"
			exit 1
		fi
		if (( `getDataReplicated "C1" "B1" "C2" "B2"` == $oldDataReplicated ));then
			# Because broken mapping should have persisted
			echo "Data replicated should not be the same after run"
			exit 1
		fi
		grepForPanics
	done
}

function runTestCase {
	echo "============================================================================"
	echo "Running pause and resume test case"
	echo "============================================================================"
	setupTopologies
	if (( $? != 0 ));then
		exit $?
	fi
	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	createRemoteClusterReference "C2" "C1"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties
	createBucketReplication "C2" "B2" "C1" "B1" DefaultBucketReplProperties
	printGlobalScopeAndCollectionInfo
	runDataLoad

	echo "Waiting 10 seconds before checking item count"
	sleep 10
	checkItemCnt "C1" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	checkItemCnt "C2" "B2" $CBWORKLOAD_COLLECTION_NUM_ITEMS

	checkUnidirectionalChangesLeft

	pauseAndResumeMultiples 3

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs
}
