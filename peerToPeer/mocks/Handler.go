// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"

	peerToPeer "github.com/couchbase/goxdcr/peerToPeer"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// GetReqAndClearOpaque provides a mock function with given fields: opaque
func (_m *Handler) GetReqAndClearOpaque(opaque uint32) (*peerToPeer.Request, chan peerToPeer.ReqRespPair, bool) {
	ret := _m.Called(opaque)

	var r0 *peerToPeer.Request
	if rf, ok := ret.Get(0).(func(uint32) *peerToPeer.Request); ok {
		r0 = rf(opaque)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*peerToPeer.Request)
		}
	}

	var r1 chan peerToPeer.ReqRespPair
	if rf, ok := ret.Get(1).(func(uint32) chan peerToPeer.ReqRespPair); ok {
		r1 = rf(opaque)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan peerToPeer.ReqRespPair)
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(uint32) bool); ok {
		r2 = rf(opaque)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// GetSpecDelNotification provides a mock function with given fields: specId, internalId
func (_m *Handler) GetSpecDelNotification(specId string, internalId string) (chan bool, error) {
	ret := _m.Called(specId, internalId)

	var r0 chan bool
	if rf, ok := ret.Get(0).(func(string, string) chan bool); ok {
		r0 = rf(specId, internalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(specId, internalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleSpecChange provides a mock function with given fields: oldSpec, newSpec
func (_m *Handler) HandleSpecChange(oldSpec *metadata.ReplicationSpecification, newSpec *metadata.ReplicationSpecification) {
	_m.Called(oldSpec, newSpec)
}

// HandleSpecCreation provides a mock function with given fields: newSpec
func (_m *Handler) HandleSpecCreation(newSpec *metadata.ReplicationSpecification) {
	_m.Called(newSpec)
}

// HandleSpecDeletion provides a mock function with given fields: oldSpec
func (_m *Handler) HandleSpecDeletion(oldSpec *metadata.ReplicationSpecification) {
	_m.Called(oldSpec)
}

// RegisterOpaque provides a mock function with given fields: req, opts
func (_m *Handler) RegisterOpaque(req peerToPeer.Request, opts *peerToPeer.SendOpts) error {
	ret := _m.Called(req, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(peerToPeer.Request, *peerToPeer.SendOpts) error); ok {
		r0 = rf(req, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Handler) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Handler) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
