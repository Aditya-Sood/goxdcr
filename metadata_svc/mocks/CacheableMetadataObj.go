package mocks

import (
	metadata_svc "github.com/couchbase/goxdcr/metadata_svc"
	mock "github.com/stretchr/testify/mock"
)

// CacheableMetadataObj is an autogenerated mock type for the CacheableMetadataObj type
type CacheableMetadataObj struct {
	mock.Mock
}

// CAS provides a mock function with given fields: obj
func (_m *CacheableMetadataObj) CAS(obj metadata_svc.CacheableMetadataObj) bool {
	ret := _m.Called(obj)

	var r0 bool
	if rf, ok := ret.Get(0).(func(metadata_svc.CacheableMetadataObj) bool); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *CacheableMetadataObj) Clone() metadata_svc.CacheableMetadataObj {
	ret := _m.Called()

	var r0 metadata_svc.CacheableMetadataObj
	if rf, ok := ret.Get(0).(func() metadata_svc.CacheableMetadataObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_svc.CacheableMetadataObj)
		}
	}

	return r0
}

// CloneAndRedact provides a mock function with given fields:
func (_m *CacheableMetadataObj) CloneAndRedact() metadata_svc.CacheableMetadataObj {
	ret := _m.Called()

	var r0 metadata_svc.CacheableMetadataObj
	if rf, ok := ret.Get(0).(func() metadata_svc.CacheableMetadataObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_svc.CacheableMetadataObj)
		}
	}

	return r0
}

// Redact provides a mock function with given fields:
func (_m *CacheableMetadataObj) Redact() metadata_svc.CacheableMetadataObj {
	ret := _m.Called()

	var r0 metadata_svc.CacheableMetadataObj
	if rf, ok := ret.Get(0).(func() metadata_svc.CacheableMetadataObj); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata_svc.CacheableMetadataObj)
		}
	}

	return r0
}
