#!/usr/bin/env bash
set -u

# Copyright (c) 2020 Couchbase, Inc.
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

function createMergeFunction {
	local funcName=$1
	local port=$2
	curl -i -POST \
		http://localhost:$port/functions/v1/libraries/xdcr/functions/$funcName \
		-u $DEFAULT_ADMIN:$DEFAULT_PW \
		-H 'content-type: application/json' \
		-d @customConflict/$funcName.js

	if (($? != 0)); then
		echo "Failed to create function $funcName"
		exit 1
	fi
}

function setUpCcrReplication {
  setupTopologies -d
  if (($? != 0)); then
    echo "setupTopologies failed"
    exit 1
  fi

  sleep 5
  mergeFunc="simpleMerge"
  declare -A CCRReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500 ["compressionType"]="Auto" ["mergeFunctionMapping"]='{"default":"simpleMerge"}')

  for cluster1 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
    bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
    for cluster2 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
      bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
      if [[ "$cluster1" != "$cluster2" ]]; then
        createRemoteClusterReference $cluster1 $cluster2
      fi
    done
  done

  for port in "${CLUSTER_NAME_XDCR_PORT_MAP[@]}"; do
    echo "createMergeFunction $mergeFunc $port"
    createMergeFunction $mergeFunc $port
    if (($? != 0)); then
      echo "createMergeFunction $mergeFunc $port failed"
      exit 1
    fi
  done

  for cluster1 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
    bucket1=${CLUSTER_NAME_BUCKET_MAP[$cluster1]}
    for cluster2 in "${!CLUSTER_NAME_PORT_MAP[@]}"; do
      bucket2=${CLUSTER_NAME_BUCKET_MAP[$cluster2]}
      if [[ "$cluster1" != "$cluster2" ]]; then
        createBucketReplication $cluster1 $bucket1 $cluster2 $bucket2 CCRReplProperties
        if (($? != 0)); then
          echo "Failed: createBucketReplication $cluster1 $bucket1 $cluster2 $bucket2 CCRReplProperties"
          exit 1
        fi
      fi
    done
  done
}

function cleanupCcrReplication {
  cleanupBucketReplications
  cleanupBuckets
  cleanupRemoteClusterRefs
}