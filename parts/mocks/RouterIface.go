package mocks

import mock "github.com/stretchr/testify/mock"

// RouterIface is an autogenerated mock type for the RouterIface type
type RouterIface struct {
	mock.Mock
}

// Route provides a mock function with given fields: data
func (_m *RouterIface) Route(data interface{}) (map[string]interface{}, error) {
	ret := _m.Called(data)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(interface{}) map[string]interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RouteCollection provides a mock function with given fields: _a0, _a1
func (_m *RouterIface) RouteCollection(_a0 interface{}, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *RouterIface) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *RouterIface) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
