package mocks

import common "github.com/couchbase/goxdcr/common"
import metadata "github.com/couchbase/goxdcr/metadata"
import mock "github.com/stretchr/testify/mock"
import pipeline "github.com/couchbase/goxdcr/pipeline"
import pipeline_manager "github.com/couchbase/goxdcr/pipeline_manager"

// pipeline_mgr_iface is an autogenerated mock type for the pipeline_mgr_iface type
type pipeline_mgr_iface struct {
	mock.Mock
}

// launchUpdater provides a mock function with given fields: topic, cur_err, rep_status
func (_m *pipeline_mgr_iface) launchUpdater(topic string, cur_err error, rep_status *pipeline.ReplicationStatus) error {
	ret := _m.Called(topic, cur_err, rep_status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, error, *pipeline.ReplicationStatus) error); ok {
		r0 = rf(topic, cur_err, rep_status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// livePipelines provides a mock function with given fields:
func (_m *pipeline_mgr_iface) livePipelines() map[string]common.Pipeline {
	ret := _m.Called()

	var r0 map[string]common.Pipeline
	if rf, ok := ret.Get(0).(func() map[string]common.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.Pipeline)
		}
	}

	return r0
}

// liveTopics provides a mock function with given fields:
func (_m *pipeline_mgr_iface) liveTopics() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// pipeline provides a mock function with given fields: topic
func (_m *pipeline_mgr_iface) pipeline(topic string) common.Pipeline {
	ret := _m.Called(topic)

	var r0 common.Pipeline
	if rf, ok := ret.Get(0).(func(string) common.Pipeline); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Pipeline)
		}
	}

	return r0
}

// removePipelineFromReplicationStatus provides a mock function with given fields: p
func (_m *pipeline_mgr_iface) removePipelineFromReplicationStatus(p common.Pipeline) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Pipeline) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// runtimeCtx provides a mock function with given fields: topic
func (_m *pipeline_mgr_iface) runtimeCtx(topic string) common.PipelineRuntimeContext {
	ret := _m.Called(topic)

	var r0 common.PipelineRuntimeContext
	if rf, ok := ret.Get(0).(func(string) common.PipelineRuntimeContext); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.PipelineRuntimeContext)
		}
	}

	return r0
}

// stopAllUpdaters provides a mock function with given fields:
func (_m *pipeline_mgr_iface) stopAllUpdaters() {
	_m.Called()
}

// topics provides a mock function with given fields:
func (_m *pipeline_mgr_iface) topics() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// validatePipeline provides a mock function with given fields: topic
func (_m *pipeline_mgr_iface) validatePipeline(topic string) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllReplicationSpecsForTargetCluster provides a mock function with given fields: targetClusterUuid
func (_m *pipeline_mgr_iface) AllReplicationSpecsForTargetCluster(targetClusterUuid string) map[string]*metadata.ReplicationSpecification {
	ret := _m.Called(targetClusterUuid)

	var r0 map[string]*metadata.ReplicationSpecification
	if rf, ok := ret.Get(0).(func(string) map[string]*metadata.ReplicationSpecification); ok {
		r0 = rf(targetClusterUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*metadata.ReplicationSpecification)
		}
	}

	return r0
}

// AllReplications provides a mock function with given fields:
func (_m *pipeline_mgr_iface) AllReplications() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// AllReplicationsForBucket provides a mock function with given fields: bucket
func (_m *pipeline_mgr_iface) AllReplicationsForBucket(bucket string) []string {
	ret := _m.Called(bucket)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// AllReplicationsForTargetCluster provides a mock function with given fields: targetClusterUuid
func (_m *pipeline_mgr_iface) AllReplicationsForTargetCluster(targetClusterUuid string) []string {
	ret := _m.Called(targetClusterUuid)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(targetClusterUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InitReplicationStatusForReplication provides a mock function with given fields: specId
func (_m *pipeline_mgr_iface) InitReplicationStatusForReplication(specId string) *pipeline.ReplicationStatus {
	ret := _m.Called(specId)

	var r0 *pipeline.ReplicationStatus
	if rf, ok := ret.Get(0).(func(string) *pipeline.ReplicationStatus); ok {
		r0 = rf(specId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipeline.ReplicationStatus)
		}
	}

	return r0
}

// OnExit provides a mock function with given fields:
func (_m *pipeline_mgr_iface) OnExit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveReplicationStatus provides a mock function with given fields: topic
func (_m *pipeline_mgr_iface) RemoveReplicationStatus(topic string) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationStatus provides a mock function with given fields: topic
func (_m *pipeline_mgr_iface) ReplicationStatus(topic string) (*pipeline.ReplicationStatus, error) {
	ret := _m.Called(topic)

	var r0 *pipeline.ReplicationStatus
	if rf, ok := ret.Get(0).(func(string) *pipeline.ReplicationStatus); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pipeline.ReplicationStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationStatusMap provides a mock function with given fields:
func (_m *pipeline_mgr_iface) ReplicationStatusMap() map[string]*pipeline.ReplicationStatus {
	ret := _m.Called()

	var r0 map[string]*pipeline.ReplicationStatus
	if rf, ok := ret.Get(0).(func() map[string]*pipeline.ReplicationStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*pipeline.ReplicationStatus)
		}
	}

	return r0
}

// ReportFixed provides a mock function with given fields: topic, r
func (_m *pipeline_mgr_iface) ReportFixed(topic string, r *pipeline_manager.PipelineUpdater) error {
	ret := _m.Called(topic, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pipeline_manager.PipelineUpdater) error); ok {
		r0 = rf(topic, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopPipeline provides a mock function with given fields: rep_status
func (_m *pipeline_mgr_iface) StopPipeline(rep_status *pipeline.ReplicationStatus) error {
	ret := _m.Called(rep_status)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pipeline.ReplicationStatus) error); ok {
		r0 = rf(rep_status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: topic, cur_err
func (_m *pipeline_mgr_iface) Update(topic string, cur_err error) error {
	ret := _m.Called(topic, cur_err)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, error) error); ok {
		r0 = rf(topic, cur_err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
