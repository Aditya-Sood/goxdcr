# Copyright 2022-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active")
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S1")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1" "col2")
declare -a collection2Arr=("col1" "col2" "col3")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]} ["S2"]=${collection2Arr[@]} ["S3"]=${collection2Arr[@]})

function runTestCase {
	echo "================================================"
	echo "Test case: Replicate system scope negative tests"
	echo "================================================"
	setupTopologies
	if (($? != 0)); then
		exit 1
	fi

	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	sleep 1
	echo "Check _system:_system is not an accepted mapping"
	output=$(curl -s -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://127.0.0.1:9000/controller/createReplication -d fromBucket=B1 -d toCluster=C2 -d toBucket=B2 -d filterSystemScope=false -d colMappingRules='{"S1.col1":"S1.col1", "_system":"_system"}' -d collectionsExplicitMapping=true -d replicationType=continuous)
	expected='System scope is mapped'
	if [[ $output != *"$expected"* ]]; then
		echo "Expect $expected but got $output"
		exit 1
	fi

	echo "Check _system._mobile:_system._mobile is not an accepted mapping"
	output=$(curl -s -X POST -u $DEFAULT_ADMIN:$DEFAULT_PW http://127.0.0.1:9000/controller/createReplication -d fromBucket=B1 -d toCluster=C2 -d toBucket=B2 -d filterSystemScope=false -d colMappingRules='{"S1.col1":"S1.col1", "_system._mobile":"_system._mobile"}' -d collectionsExplicitMapping=true -d replicationType=continuous)
	if [[ $output != *"$expected"* ]]; then
		echo "Expect $expected but got $output"
		exit 1
	fi

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"
	cleanupBuckets
	cleanupRemoteClusterRefs
}
