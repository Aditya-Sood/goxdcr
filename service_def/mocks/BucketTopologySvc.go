// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"
	mock "github.com/stretchr/testify/mock"

	service_def "github.com/couchbase/goxdcr/service_def"

	sync "sync"
)

// BucketTopologySvc is an autogenerated mock type for the BucketTopologySvc type
type BucketTopologySvc struct {
	mock.Mock
}

// ReplicationSpecChangeCallback provides a mock function with given fields: id, oldVal, newVal, wg
func (_m *BucketTopologySvc) ReplicationSpecChangeCallback(id string, oldVal interface{}, newVal interface{}, wg *sync.WaitGroup) error {
	ret := _m.Called(id, oldVal, newVal, wg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}, *sync.WaitGroup) error); ok {
		r0 = rf(id, oldVal, newVal, wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToLocalBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) SubscribeToLocalBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) (chan service_def.SourceNotification, error) {
	ret := _m.Called(spec, subscriberId)

	var r0 chan service_def.SourceNotification
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) chan service_def.SourceNotification); ok {
		r0 = rf(spec, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.SourceNotification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string) error); ok {
		r1 = rf(spec, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToRemoteBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) SubscribeToRemoteBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) (chan service_def.TargetNotification, error) {
	ret := _m.Called(spec, subscriberId)

	var r0 chan service_def.TargetNotification
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) chan service_def.TargetNotification); ok {
		r0 = rf(spec, subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan service_def.TargetNotification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*metadata.ReplicationSpecification, string) error); ok {
		r1 = rf(spec, subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnSubscribeLocalBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeLocalBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSubscribeRemoteBucketFeed provides a mock function with given fields: spec, subscriberId
func (_m *BucketTopologySvc) UnSubscribeRemoteBucketFeed(spec *metadata.ReplicationSpecification, subscriberId string) error {
	ret := _m.Called(spec, subscriberId)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.ReplicationSpecification, string) error); ok {
		r0 = rf(spec, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
