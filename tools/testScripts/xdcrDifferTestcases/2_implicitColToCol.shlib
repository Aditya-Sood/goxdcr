#!/usr/bin/env bash
set -u
# Copyright 2019-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.

# =============================
# topological map information
# =============================
# cluster -> Bucket(s)
# -----------------
CLUSTER_NAME_PORT_MAP=(["C1"]=9000 ["C2"]=9001)
CLUSTER_NAME_XDCR_PORT_MAP=(["C1"]=13000 ["C2"]=13001)
# Set c1 to have 2 buckets and c2 to have 1 bucket
declare -a cluster1BucketsArr
cluster1BucketsArr=("B0" "B1")
CLUSTER_NAME_BUCKET_MAP=(["C1"]=${cluster1BucketsArr[@]} ["C2"]="B2")

# Bucket properties
declare -A BucketProperty=(["ramQuotaMB"]=100 ["flushEnabled"]=1)
declare -A Bucket1Properties=(["ramQuotaMB"]=100 ["CompressionMode"]="Active" ["flushEnabled"]=1)
insertPropertyIntoBucketNamePropertyMap "B0" BucketProperty
insertPropertyIntoBucketNamePropertyMap "B1" Bucket1Properties
insertPropertyIntoBucketNamePropertyMap "B2" BucketProperty

declare -A DefaultBucketReplProperties=(["replicationType"]="continuous" ["checkpointInterval"]=60 ["statsInterval"]=500)

# Bucket -> Scopes
# -----------------
declare -a scope1Arr=("S1" "S2")
BUCKET_NAME_SCOPE_MAP=(["B1"]=${scope1Arr[@]} ["B2"]="S1")

# Scopes -> Collections
# ----------------------
declare -a collection1Arr=("col1")
SCOPE_NAME_COLLECTION_MAP=(["S1"]=${collection1Arr[@]})

function runDataLoad {
	echo "RUNNING dataload..."
	runCbWorkloadGenCollection "C1" "B1" "S1" "col1"
}

function runTestCase {
	echo "============================================================================"
	echo "Running XdcrDiffer implicit collection bidirectional singleLoad test case"
	echo "============================================================================"
	setupTopologies
	if (($? != 0)); then
		exit $?
	fi
	# Wait for vbuckets and all the other things to propagate before XDCR provisioning
	sleep 5
	createRemoteClusterReference "C1" "C2"
	sleep 1
	createBucketReplication "C1" "B1" "C2" "B2" DefaultBucketReplProperties

	runDataLoad

	checkUnidirectionalChangesLeft
	checkItemCnt "C1" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	checkItemCnt "C2" "B2" $CBWORKLOAD_COLLECTION_NUM_ITEMS

	local retVal
	runXdcrDiffer "C1" "B1" "C2" "B2"
	retVal=$?
	if (($retVal != 0)); then
		echo "Differ returned non-0 exit code"
		return $retVal
	fi

	validateDifferResults 0 0 0
	retVal=$?
	if (($retVal != 0)); then
		echo "Failed"
		return $retVal
	fi

	echo "============================================================================"
	echo "PASSED"
	echo "============================================================================"

	# TODO - cannot do this yet
	#echo "Pausing replication and flushing target bucket to create $CBWORKLOAD_COLLECTION_NUM_ITEMS mismatches"
	#pauseReplication "C1" "B1" "C2" "B2"
	#flushBucket "C2" "B2"
	#sleep 5
	#checkItemCnt "C1" "B1" $CBWORKLOAD_COLLECTION_NUM_ITEMS
	#checkItemCnt "C2" "B2" 0

	#runXdcrDiffer "C1" "B1" "C2" "B2"
	#retVal=$?
	#if (($retVal != 0)); then
	#	echo "Differ returned non-0 exit code"
	#	return $retVal
	#fi

	#validateDifferResults 0 0 $CBWORKLOAD_COLLECTION_NUM_ITEMS
	#retVal=$?
	#if (($retVal != 0)); then
	#	echo "Failed"
	#	return $retVal
	#fi

	#echo "============================================================================"
	#echo "PASSED"
	#echo "============================================================================"
	cleanupBucketReplications
	cleanupBuckets
	cleanupRemoteClusterRefs
}
