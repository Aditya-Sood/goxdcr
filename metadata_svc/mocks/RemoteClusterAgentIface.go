// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	metadata "github.com/couchbase/goxdcr/metadata"

	mock "github.com/stretchr/testify/mock"
)

// RemoteClusterAgentIface is an autogenerated mock type for the RemoteClusterAgentIface type
type RemoteClusterAgentIface struct {
	mock.Mock
}

// DeleteReference provides a mock function with given fields: delFromMetaKv
func (_m *RemoteClusterAgentIface) DeleteReference(delFromMetaKv bool) (*metadata.RemoteClusterReference, error) {
	ret := _m.Called(delFromMetaKv)

	var r0 *metadata.RemoteClusterReference
	if rf, ok := ret.Get(0).(func(bool) *metadata.RemoteClusterReference); ok {
		r0 = rf(delFromMetaKv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(delFromMetaKv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapability provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetCapability() (metadata.Capability, error) {
	ret := _m.Called()

	var r0 metadata.Capability
	if rf, ok := ret.Get(0).(func() metadata.Capability); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(metadata.Capability)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionStringForCAPIRemoteCluster provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetConnectionStringForCAPIRemoteCluster() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetReferenceAndStatusClone provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetReferenceAndStatusClone() *metadata.RemoteClusterReference {
	ret := _m.Called()

	var r0 *metadata.RemoteClusterReference
	if rf, ok := ret.Get(0).(func() *metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	return r0
}

// GetReferenceClone provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) GetReferenceClone() *metadata.RemoteClusterReference {
	ret := _m.Called()

	var r0 *metadata.RemoteClusterReference
	if rf, ok := ret.Get(0).(func() *metadata.RemoteClusterReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.RemoteClusterReference)
		}
	}

	return r0
}

// Refresh provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) Refresh() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: newRef
func (_m *RemoteClusterAgentIface) Start(newRef *metadata.RemoteClusterReference) error {
	ret := _m.Called(newRef)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference) error); ok {
		r0 = rf(newRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) Stop() {
	_m.Called()
}

// UpdateReferenceFrom provides a mock function with given fields: newRef, writeToMetaKv
func (_m *RemoteClusterAgentIface) UpdateReferenceFrom(newRef *metadata.RemoteClusterReference, writeToMetaKv bool) error {
	ret := _m.Called(newRef, writeToMetaKv)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) error); ok {
		r0 = rf(newRef, writeToMetaKv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReferenceFromAsync provides a mock function with given fields: newRef, writeToMetaKv
func (_m *RemoteClusterAgentIface) UpdateReferenceFromAsync(newRef *metadata.RemoteClusterReference, writeToMetaKv bool) error {
	ret := _m.Called(newRef, writeToMetaKv)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metadata.RemoteClusterReference, bool) error); ok {
		r0 = rf(newRef, writeToMetaKv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsesAlternateAddress provides a mock function with given fields:
func (_m *RemoteClusterAgentIface) UsesAlternateAddress() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
